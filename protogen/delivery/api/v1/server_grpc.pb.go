// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryAPIClient is the client API for DeliveryAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryAPIClient interface {
	// Smallest request that needs no auth and returns 200.
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error)
	CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*CreateDeliveryResponse, error)
}

type deliveryAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryAPIClient(cc grpc.ClientConnInterface) DeliveryAPIClient {
	return &deliveryAPIClient{cc}
}

func (c *deliveryAPIClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*GetHealthResponse, error) {
	out := new(GetHealthResponse)
	err := c.cc.Invoke(ctx, "/delivery.api.v1.DeliveryAPI/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryAPIClient) CreateDelivery(ctx context.Context, in *CreateDeliveryRequest, opts ...grpc.CallOption) (*CreateDeliveryResponse, error) {
	out := new(CreateDeliveryResponse)
	err := c.cc.Invoke(ctx, "/delivery.api.v1.DeliveryAPI/CreateDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryAPIServer is the server API for DeliveryAPI service.
// All implementations should embed UnimplementedDeliveryAPIServer
// for forward compatibility
type DeliveryAPIServer interface {
	// Smallest request that needs no auth and returns 200.
	GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error)
	CreateDelivery(context.Context, *CreateDeliveryRequest) (*CreateDeliveryResponse, error)
}

// UnimplementedDeliveryAPIServer should be embedded to have forward compatible implementations.
type UnimplementedDeliveryAPIServer struct {
}

func (UnimplementedDeliveryAPIServer) GetHealth(context.Context, *GetHealthRequest) (*GetHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedDeliveryAPIServer) CreateDelivery(context.Context, *CreateDeliveryRequest) (*CreateDeliveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDelivery not implemented")
}

// UnsafeDeliveryAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryAPIServer will
// result in compilation errors.
type UnsafeDeliveryAPIServer interface {
	mustEmbedUnimplementedDeliveryAPIServer()
}

func RegisterDeliveryAPIServer(s grpc.ServiceRegistrar, srv DeliveryAPIServer) {
	s.RegisterService(&DeliveryAPI_ServiceDesc, srv)
}

func _DeliveryAPI_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryAPIServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery.api.v1.DeliveryAPI/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryAPIServer).GetHealth(ctx, req.(*GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryAPI_CreateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryAPIServer).CreateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delivery.api.v1.DeliveryAPI/CreateDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryAPIServer).CreateDelivery(ctx, req.(*CreateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryAPI_ServiceDesc is the grpc.ServiceDesc for DeliveryAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delivery.api.v1.DeliveryAPI",
	HandlerType: (*DeliveryAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _DeliveryAPI_GetHealth_Handler,
		},
		{
			MethodName: "CreateDelivery",
			Handler:    _DeliveryAPI_CreateDelivery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery/api/v1/server.proto",
}
